#!/usr/bin/env bash

set -e

# jww (2020-04-01): I use this to keep build products in a separate directory
# tree.
PRODUCTS=$(echo $PWD | sed -E 's/\b(dfinity|src)\b/Products/')

if [[ ! -f .envrc ]]; then
    cat > .envrc <<'EOF'
keep_vars() {
    local v
    for k in $@; do
        eval "v=\$$k"
        DIRENV_kept="$DIRENV_kept"$(printf "%s=%s\000" "$k" "$v" | base64)
    done
}

reset_kept() {
    : ${DIRENV_kept?No environment stored. Missing keep_except()?}
    echo "$DIRENV_kept" | base64 -d | while IFS= read -r -d '' V; do
        echo "export ${V%%=*}='${V#*=}'"
    done
    unset DIRENV_kept
}

keep_vars             \
    ALTERNATE_EDITOR  \
    EDITOR            \
    EMACS_SERVER_FILE \
    ITERM_SESSION_ID  \
    SECURITYSESSIONID \
    SSH_AUTH_SOCK     \
    SSL_CERT_FILE     \
    TERM              \
    TERM_SESSION_ID

source <(direnv apply_dump .envrc.cache)
source <(reset_kept)

watch_file .envrc
watch_file .envrc.cache
watch_file default.nix
EOF

    [[ -f package.nix ]] && echo "watch_file package.nix" >> .envrc
    [[ -f shell.nix ]] && echo "watch_file shell.nix" >> .envrc

    if [[ -n "$PRODUCTS" ]]; then
        if [[ -f package.yaml \
           || -n "$(find . -maxdepth 1 -name '*.cabal')" ]]; then
            cat >> .envrc <<EOF

export CABAL_BUILDDIR=$PRODUCTS/dist
EOF
        fi

        if [[ -f Cargo.toml ]]; then
            cat >> .envrc <<EOF

export CARGO_TARGET_DIR=$PRODUCTS/target
export CARGO_HOME=\$CARGO_TARGET_DIR/.cargo-home
EOF
        fi
    fi
fi

nix-shell -Q --run "  \
unset                 \
    ALTERNATE_EDITOR  \
    EDITOR            \
    EMACS_SERVER_FILE \
    ITERM_SESSION_ID  \
    SECURITYSESSIONID \
    SSH_AUTH_SOCK     \
    SSL_CERT_FILE     \
    TERM              \
    TERM_SESSION_ID;  \
direnv dump > .envrc.cache"

identify_shell() {
    local shell="shell.nix"
    if [[ -n "$NIXFILE" && -f "${NIXFILE}" ]]; then
        shell="$NIXFILE"
    elif [[ ! -f "${shell}" ]]; then
        shell="default.nix"
    fi

    if [[ ! -f "${shell}" ]]; then
        echo "use nix: shell.nix or default.nix not found in the folder"
        exit 1
    fi
    echo "${shell}"
}

build_drv() {
    local dir="${PWD}"/.direnv
    local default="${dir}/default"
    local shell=$(identify_shell)
    if [[ ! -L "${default}" ]] || [[ ! -d `readlink "${default}"` ]]; then
        local wd="${dir}/env-`md5sum "${shell}" | cut -c -32`"
        mkdir -p "${wd}"

        local drv="${wd}/env.drv"
        if [[ ! -f "${drv}" ]]; then
            IN_NIX_SHELL=1 nix-instantiate "${NIXARGS[@]}"              \
                --add-root "${drv}" --indirect "${shell}" > /dev/null
            nix-store -r `nix-store --query --references "${drv}"`      \
                --add-root "${wd}/dep" --indirect > /dev/null
        fi

        rm -f "${default}"
        ln -s `basename "${wd}"` "${default}"
    fi

    local drv=`readlink "${default}/env.drv"`
    echo "${drv}"
}

build_drv

direnv reload
